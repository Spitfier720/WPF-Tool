<Window x:Class="WPF_Tool.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:WPF_Tool"
        local:WindowClosingCommandBehavior.ClosingCommand="{Binding WindowCloseCommand}"
        Title="MainWindow" Height="450" Width="800">
    <Window.Resources>
        <local:ContextMenuParameterConverter x:Key="ContextMenuParameterConverter"/>
        <local:IsErrorStatusCodeConverter x:Key="IsErrorStatusCodeConverter"/>
        <HierarchicalDataTemplate DataType="{x:Type local:TreeNode}" ItemsSource="{Binding Children}">
            <TextBlock Text="{Binding Header}" />
        </HierarchicalDataTemplate>

        <ContextMenu x:Key="TreeViewItemContextMenu" x:Shared="False">
            <MenuItem Header="Add" 
                      Command="{Binding DataContext.MockNodeContextMenuCommand, RelativeSource={RelativeSource AncestorType=Window}}"
                      IsEnabled="{Binding DataContext.IsMockFileSelected, RelativeSource={RelativeSource AncestorType=Window}}">
                <MenuItem.CommandParameter>
                    <MultiBinding Converter="{StaticResource ContextMenuParameterConverter}" ConverterParameter="Add">
                        <Binding RelativeSource="{RelativeSource AncestorType=TreeViewItem}" />
                    </MultiBinding>
                </MenuItem.CommandParameter>
            </MenuItem>

            <MenuItem Header="Edit" 
                      Command="{Binding DataContext.MockNodeContextMenuCommand, RelativeSource={RelativeSource AncestorType=Window}}"
                      IsEnabled="{Binding DataContext.IsMockNodeSelected, RelativeSource={RelativeSource AncestorType=Window}}">
                <MenuItem.CommandParameter>
                    <MultiBinding Converter="{StaticResource ContextMenuParameterConverter}" ConverterParameter="Edit">
                        <Binding RelativeSource="{RelativeSource AncestorType=TreeViewItem}" />
                    </MultiBinding>
                </MenuItem.CommandParameter>
            </MenuItem>

            <MenuItem Header="Remove" Command="{Binding DataContext.MockNodeContextMenuCommand, RelativeSource={RelativeSource AncestorType=Window}}">
                
                <MenuItem.CommandParameter>
                    <MultiBinding Converter="{StaticResource ContextMenuParameterConverter}" ConverterParameter="Remove">
                        <Binding RelativeSource="{RelativeSource AncestorType=TreeViewItem}" />
                    </MultiBinding>
                </MenuItem.CommandParameter>
            
            </MenuItem>

            <MenuItem Header="Refresh"
                      Command="{Binding DataContext.MockNodeContextMenuCommand, RelativeSource={RelativeSource AncestorType=Window}}"
                      IsEnabled="{Binding DataContext.IsMockFileSelected, RelativeSource={RelativeSource AncestorType=Window}}">
                <MenuItem.CommandParameter>
                    <MultiBinding Converter="{StaticResource ContextMenuParameterConverter}" ConverterParameter="Refresh">
                        <Binding RelativeSource="{RelativeSource AncestorType=TreeViewItem}" />
                    </MultiBinding>
                </MenuItem.CommandParameter>
            </MenuItem>

            <MenuItem Header="Save" Command="{Binding DataContext.MockNodeContextMenuCommand, RelativeSource={RelativeSource AncestorType=Window}}"
                      IsEnabled="{Binding DataContext.IsMockFileSelected, RelativeSource={RelativeSource AncestorType=Window}}">

                <MenuItem.CommandParameter>
                    <MultiBinding Converter="{StaticResource ContextMenuParameterConverter}" ConverterParameter="Save">
                        <Binding RelativeSource="{RelativeSource AncestorType=TreeViewItem}" />
                    </MultiBinding>
                </MenuItem.CommandParameter>

            </MenuItem>
        </ContextMenu>
        
        <Style x:Key="ModernMenuButton" TargetType="Button">
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="Background" Value="White"/>
            <Setter Property="BorderBrush" Value="#CCC"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Padding" Value="20,4"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="4">
                            <Border Padding="{TemplateBinding Padding}">
                                <ContentPresenter HorizontalAlignment="Stretch" VerticalAlignment="Center"/>
                            </Border>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="border" Property="Background" Value="#F0F8FF"/>
                                <Setter TargetName="border" Property="BorderBrush" Value="#3399FF"/>
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused" Value="True">
                                <Setter TargetName="border" Property="BorderBrush" Value="#3399FF"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="#AAA"/>
                                <Setter TargetName="border" Property="Background" Value="#F7F7F7"/>
                                <Setter TargetName="border" Property="BorderBrush" Value="#EEE"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="50"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="200"/>
            <ColumnDefinition Width="5"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <!-- Custom Menu Bar using StackPanel and Buttons -->
        <StackPanel Orientation="Horizontal" Background="#EEE" VerticalAlignment="Stretch" Grid.Row="0" Grid.Column="2">
            <Button Content="Start Service" Height="30" Margin="10,0" Style="{StaticResource ModernMenuButton}" Command="{Binding StartServiceCommand}" IsEnabled="{Binding CanStartService}"/>
            <Button Content="Stop Service" Height="30" Margin="10,0" Style="{StaticResource ModernMenuButton}" Command="{Binding StopServiceCommand}" IsEnabled="{Binding CanStopService}"/>
            <Button Content="Load Mock File" Height="30" Margin="10,0" Style="{StaticResource ModernMenuButton}" Command="{Binding LoadMockFileCommand}" IsEnabled="{Binding CanLoadMockFile}"/>
            <Button Content="Clear Log" Height="30" Margin="10,0" Style="{StaticResource ModernMenuButton}" Command="{Binding ClearLogCommand}"/>
        </StackPanel>

        <!-- TreeView Sidebar -->
        <TreeView Grid.Row="0" Grid.Column="0" Grid.RowSpan="2" x:Name="treeView" ItemsSource="{Binding RootNodes}">
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="SelectedItemChanged">
                    <i:InvokeCommandAction Command="{Binding TreeNodeSelectedCommand}" 
                               CommandParameter="{Binding SelectedItem, RelativeSource={RelativeSource AncestorType=TreeView}}" />
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseDoubleClick">
                    <i:InvokeCommandAction Command="{Binding TreeNodeDoubleClickCommand}" 
                               CommandParameter="{Binding SelectedItem, RelativeSource={RelativeSource AncestorType=TreeView}}" />
                </i:EventTrigger>
            </i:Interaction.Triggers>
            <TreeView.ItemContainerStyle>
                <Style TargetType="TreeViewItem">
                    <Setter Property="ContextMenu" Value="{StaticResource TreeViewItemContextMenu}"/>
                </Style>
            </TreeView.ItemContainerStyle>
        </TreeView>

        <GridSplitter Grid.Row="0" 
                      Grid.Column="1"
                      Grid.RowSpan="2"
                      Width="5"
                      HorizontalAlignment="Stretch"
                      VerticalAlignment="Stretch"
                      ShowsPreview="True" />

        <!-- Main Content Area -->
        <Border Grid.Row="1" Grid.Column="2" Margin="0,0,10,0" BorderBrush="#CCC" BorderThickness="1" CornerRadius="4" Background="White" >
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    <RowDefinition Height="80" />
                </Grid.RowDefinitions>
                <ScrollViewer Grid.Row="0" VerticalScrollBarVisibility="Auto">
                    <ItemsControl ItemsSource="{Binding RequestResponsePairs}">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <Expander Margin="4">
                                    <Expander.Header>
                                        <TextBlock Text="{Binding RequestSummary}">
                                            <TextBlock.Style>
                                                <Style TargetType="TextBlock">
                                                    <Setter Property="FontWeight" Value="Normal"/>
                                                    <Setter Property="Foreground" Value="Black"/>
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding StatusCode, Converter={StaticResource IsErrorStatusCodeConverter}}" Value="True">
                                                            <Setter Property="FontWeight" Value="Bold"/>
                                                            <Setter Property="Foreground" Value="Red"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </TextBlock.Style>
                                        </TextBlock>
                                    </Expander.Header>
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <TextBlock Text="Request:" FontWeight="Bold" Margin="0,0,0,2" Grid.Row="0"/>
                                        <TextBox Text="{Binding RequestBody}"
                                                 IsReadOnly="True"
                                                 TextWrapping="NoWrap"
                                                 Background="#F7F7F7"
                                                 Margin="0,0,0,6"
                                                 MaxHeight="250"
                                                 HorizontalAlignment="Stretch"
                                                 VerticalScrollBarVisibility="Auto"
                                                 HorizontalScrollBarVisibility="Auto"
                                                 Grid.Row="1"/>
                                        <TextBlock Text="{Binding ResponseSummary}" FontWeight="Bold" Margin="0,0,0,2" Grid.Row="2"/>
                                        <TextBox Text="{Binding ResponseBody}"
                                                 IsReadOnly="True"
                                                 TextWrapping="NoWrap"
                                                 Background="#FFFBEA"
                                                 MaxHeight="250"
                                                 HorizontalAlignment="Stretch"
                                                 VerticalScrollBarVisibility="Auto"
                                                 HorizontalScrollBarVisibility="Auto"
                                                 Grid.Row="3"/>
                                    </Grid>
                                </Expander>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </ScrollViewer>
                <TextBox Grid.Row="1"
                         Text="{Binding LogOutput, UpdateSourceTrigger=PropertyChanged}"
                         IsReadOnly="True"
                         TextWrapping="Wrap"
                         VerticalScrollBarVisibility="Auto"
                         HorizontalScrollBarVisibility="Auto"
                         Background="#F7F7F7"
                         FontFamily="Consolas"
                         BorderBrush="#CCC"/>
            </Grid>
        </Border>
    </Grid>
</Window>
